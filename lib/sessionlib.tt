#nop ---------------------------------------------------------------------- 
#nop session handling: connection, activation, disconnection and timing out 
#nop ---------------------------------------------------------------------- 
#nop << help alias for TinFrame session handling;
#alias sessionhelp {
    #echo {--- TinFrame session help --- };
    #echo {E 'onconnect' is a placeholder for actions to perform on connection};
    #echo {E 'onactive' is a placeholder for actions to perform on session change};
    #echo {E 'prequit' is a placeholder for actions to perform right before quitting};
    #echo {  'quit' really calls 'prequit' before sending mud the 'quit' command};
    #echo {  'onquit' calls 'memchar' and closes map if char defined};
    #echo {  'memchar' memorizes map location and status buffs/flags/properties on quit};
    #echo {E 'postquit' is a placeholder for any 'memalso' to perform after memchar};
    #echo {  'memalso' adds a line to char's memfile, if char defined};
    #echo {  'ontimeout' and 'posttimeout' call their quit counterparts by default};
    #echo {  'loginas' sets a char, loads its class, calls loginsequence and recallchar, };
    #echo {            or lists available chars if none is given};
    #echo {  'loginsequence' sends \$name and \$pass by default - may be overridden};
    #echo {  'postlogin' does nothing by default - may be overridden};
    #echo {  'recallchar' is the counterpart to 'memchar'/'memalso'};
    #echo {E = empty by default , others may be overridden if needed on a per-mud basis};
}
#nop >>;
#nop - alias 'loginas' to login using a character defined on a chars/ .tt file and recall information about it
#nop - caller-overrideable 'loginsequence' and 'postlogin'
#nop - aliases 'memchar', 'memalso', 'recallchar' for use in 'onconnect' and 'onquit'
#nop - caller-overrideable 'onconnect', 'prequit', 'onquit', 'ontimeout' are called when connecting / disconnecting
#nop << auto-set $activesession, auto-save map, log connection/disconnection and call 'onconnect', 'onquit', ...;
#alias fetchdate {#script thedate {date +"%Y.%m.%d - %H:%M"}}
#event {SESSION CONNECTED}{
 #var activesession %0;
 fetchdate;
 loglog {* * * connected to $mudname on $thedate[1] * * *};
 #unvar thedate;
 onconnect; #nop may contain loginas and/or recallchar;
}
#event {SESSION ACTIVATED} {
  #var activesession %0;
  #echo {*** session $activesession activated ***};
  onactive; #nop important for multilib;
} 
#event {SESSION DEACTIVATED} {
  #echo {*** session $activesession deactivated ***};
} 

#event {SESSION DISCONNECTED}{
 #system {cd panes; ln -sf start_log.txt log.txt};
 fetchdate;
 loglog {* * * disconnected from $mudname on $thedate[1] * * *};
 #unvar thedate;
 onquit; #nop typically contains memmap - so must be done *before* closing map;
 #if &mapfile {
   closemap;
   #echo {map cleanly closed on disconnection.};
 };
 postquit;
 #if {$multi > 0} {#gts gtskillsession $sessionname};
 #nop note that *after* this, session data is definitely lost;
}

#event {SESSION TIMED OUT}{
 #system {cd panes; ln -sf start_log.txt log.txt};
 fetchdate;
 loglog {* * * timed out from $mudname on $thedate[1] * * *};
 #unvar thedate;
 ontimeout; #nop normally calls 'onquit', but can be overridden;
 #if &mapfile {
   closemap;
   #echo {map cleanly closed on timeout.};
 };
 posttimeout; #nop normally calls 'postquit', but can be overridden;
 #if {$multi > 0} {#gts killsession $sessionname};
 #nop note that *after* this, session data is definitely lost;
}
#nop >>
#nop << auxiliary functions : memchar, memalso, recallchar;
#alias memchar {#nop <<;
  #format {memfile} {%s%s%s} {chars/} {%1} {.mf};
  #system {rm $memfile 2> /dev/null};

  #nop save map information, if any;
  #if { &mapfile } {
    #map get roomvnum lastvnum;

    #line log {$memfile} {#nop map last location recall for %1};
    #line log {$memfile} {loadmap $currentmap $lastvnum};

    #echo {memchar for $name: saved map $currentmap vnum $lastvnum};
  };
  #else {#line log {$memfile} {#echo no map information saved for %1}};

  #nop save status information, if any;
  #foreach $statusflags[] flag  {#line log {$memfile} {#var statusflags[$flag] {saved}}};
  #foreach $dispready[]   skill {#line log {$memfile} {#var dispready[$skill]  {saved}}};
  #foreach $isready[]     skill {#line log {$memfile} {#var isready[$skill]    {saved}}};
  #foreach $dispbuffs[]   buff  {#line log {$memfile} {#var dispbuffs[$buff]   {saved}}};
  #foreach $activebuffs[] buff  {#line log {$memfile} {#var activebuffs[$buff] {saved}}};
  #foreach $statusprops[] key   {#line log {$memfile} {#var statusprops[$key]  {$statusprops[$key]}}};
};#nop >>
#alias memalso { #nop <<;
  #if &char {
    #line log {$memfile} {%1};
  };
};
#nop >>
#alias recallchar { #nop <<;
  #format {memfile} {%s%s%s} {chars/} {%1} {.mf};
  #read {$memfile};
  #echo {recalled memfile for %1};
};
#nop >>
#nop >>
#nop << default versions of 'onconnect', 'postlogin', 'onactive', 'prequit', 'quit' override, 'onquit', 'postquit', 'ontimeout', 'posttimeout';
#alias onconnect {#nop override this alias on mud tt file if necessary}
#alias postlogin {#nop override this alias on mud tt file if necessary};

#alias onactive  {setuppanes; #nop overridden by multilib if loaded}

#alias prequit {
  #nop stuff to be done before 'quit' command is sent to mud;
  #nop override this alias on mud tt file if necessary;
}

#var prequitdelay {0.2}
#alias quit {
  #nop delay actual quit in case 'prequit' script needs to do some stuff before;
  prequit;
  #delay $prequitdelay {#send quit};
};

#alias onquit {
  #nop stuff to be done before map is closed;
  #nop override this alias on mud tt file if necessary;
  #nop by default, character's map location is saved;
  #if &char {
    memchar $char;
    closemap;
  }
  #nop typically any other info would be saved later on postquit;
}

#alias postquit {
  #nop extra bits of quit handling after map is closed;
  #nop override this alias on mud tt file if necessary;
  #nop e.g.: "memalso {#nop extra stuff};"
}

#alias ontimeout {
  #nop stuff to be done before map is closed;
  #nop override this alias on mud tt file if necessary;
  onquit;
}

#alias posttimeout {
  #nop extra bits of quit handling after map is closed;
  #nop override this alias on mud tt file if necessary;
  postquit;
}
#nop >>

#nop -- setting up tmux panes --
#alias setuppanes { #nop << optional: give char as argument (otherwise $char is used);
  #nop map file apparently shouldn't be symbolic link, or it lags.... :-(;
  #var maplogfile {panes/map.txt};
  #system {touch $maplogfile};

  #nop determine if a char is defined, and link to it if yes;
  #if {"%1" != ""} {#var char %1};
  #if {&char} {#var logprefix $char} {#var logprefix start};
  #var loglogfile  {panes/${logprefix}_log.txt};
  #var chatlogfile {panes/${logprefix}_chat.txt};
  #var statlogfile {panes/${logprefix}_stat.txt};
  #system {
    cd panes;
    touch ${logprefix}_log.txt;  ln -sf ${logprefix}_log.txt  log.txt;
    touch ${logprefix}_chat.txt; ln -sf ${logprefix}_chat.txt chat.txt;
    touch ${logprefix}_stat.txt; ln -sf ${logprefix}_stat.txt stat.txt;
  };
  #if {&char} {showstatus};
  #nop if this is multinframe, alt panes need to be set up as well;
  #if {&multi} {
    #system {cd panes; touch ${logprefix}_alt.txt; ln -sf ${logprefix}_alt.txt alt.txt};
    #if {$multi > 1} {
      #system {cd panes; touch ${logprefix}_third.txt; ln -sf ${logprefix}_third.txt third.txt};
    };
  };
}; #nop >>;
setuppanes; #nop setuppanes when tinrame first invoked, and again when reloading lib;

#nop -- aliases about logging in characters --
#alias loginsequence { #nop << override this alias on mud tt file if necessary;
  $name;
  $pass;
}; #nop >>;
#alias showallchars { #nop <<;
  #script {allcharnames} {ls chars/*.tt | sed -e s#chars/## -e s#.tt## | xargs};
  #echo {<040>possible chars: $allcharnames[1]<099>};
  #unvar allcharnames;
}; #nop >>;
#alias loginas { #nop << with $char as argument;
  #nop show available chars if no char or non-existant char asked for;
  #script {charnames} {ls chars/*.tt | sed -e s#chars/## -e s#.tt##};
  #var index 0;
  #list charnames find {%1} index;
  #if { "%1" == "" || $index == 0 } { 
    #echo {<020>loginas needs a character name for which a config file exists};
    showallchars;
  };
  #nop otherwise define and login $char and recall its "memory" (map location, ...);
  #else {
    #var char {%1};
    subclassinclude {chars} {$char};
    #if {&name} {#nop;} {#var name {$char}}; #nop in case char's file didn't define $name;
    loginsequence; #nop needs to be done *before* recallchar;
    setuppanes $char; #nop sets up log files and panes;
    recallchar $char; #nop character's memorized map and other variables are recalled;
    fetchdate; loglog {<024>Logged in as $name on $thedate[1]<099>}; #unvar thedate;
    postlogin;
  };
  #unvar index;
}; #nop >>;
#nop------------------------
#nop CopyLeft by dalker
#nop create date: 2016-05-28
#nop modif  date: 2016-07-07
