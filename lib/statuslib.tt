#nop .-----------------.
#nop |   status log    |
#nop .-----------------.
#alias statushelp { #nop << help alias;
    #echo {--- TinFrame status pane handling --- };
    #echo {showstatus                  : update status pane (usually automatic) };
    #echo {flagon/flagoff <flag>       : set or clear a flag};
    #echo {clearflags                  : clear all flags};
    #echo {flagif <flag> <trigger>     : flagon  on ^trigger mud line};
    #echo {unflagif <flag> <trig>      : flagoff on ^trig    mud line};
    #echo {sproperty <key> <value>     : set property key->value};
    #echo {spropclear <key>            : clear a property, or all if no key given};
    #echo {buffon/buffoff <buff>       : set buff as active/inactive};
    #echo {buffif <buff> <trigger>     : buffon  on ^trigger mud line};
    #echo {unbuffif <buff> <trig>      : buffoff on ^trig    mud line};
    #echo {tossbuff <buff>             : remove buff from all lists, remove all if none specified};
    #echo {isready/isntready <skill>   : set skill/spell as ready/unready};
    #echo {isreadyif <skill> <trigger> : isready   on ^trigger mud line};
    #echo {isntreadyif <skill> <trig>  : isntready on ^trig    mud line};
    #echo {tossready <skill>           : remove skill from all lists, remove all if none specified};
    #echo {@flag[on|off] {<flag>}      : booleans for use in conditionals};
    #echo {@buff[on|off] {<buff>}      : booleans for use in conditionals};
    #echo {@ready[on|off] {<skill>}    : booleans for use in conditionals};
    #echo {foreachbuff {<action>}      : perform action on %%%1, replaced by each buff (buggy!)};
    #echo {foreachflag {<action>}      : perform action on %%%1, replaced by each flag (buggy!)};
    #echo {autobuff/custombuff/stopbuff - partially implemented for bot-allowing muds};
};
#nop >>;

#nop associative tables: statusflags, dispbuffs, activebuffs, autobuffs, queuedbuffs, custombuffs, statusprops;
#nop N.B.: queuedbuffs is purely a placeholder, not implemented on framework 
#nop       (can be used on a per-mud basis combined with autobuff/custombuff/stopbuff)
#nop << make sure the hashes exist - and make sure they don't get killed when reloading class;
#nop these lists must live in 'temp', so that they don't get erased when reloading the libs;
#class temp open;
#if {&statusflags} {#nop;} {#var statusflags {}};
#if {&dispbuffs}   {#nop;} {#var dispbuffs   {}};
#if {&activebuffs} {#nop;} {#var activebuffs {}};
#if {&autobuffs}   {#nop;} {#var autobuffs   {}};
#if {&queuedbuffs} {#nop;} {#var queuedbuffs {}};
#if {&custombuffs} {#nop;} {#var custombuffs {}};
#if {&statusprops} {#nop;} {#var statusprops {}};
#if {&dispready}   {#nop;} {#var dispready   {}};
#if {&isready}     {#nop;} {#var isready     {}};
#class statuslib open;
#nop >>;

#nop displaying in status pane
#nop << showstatus - colors can be overridden
#nop colors for on/off buffs (can be overrridden);
#var boncol   {<aea>}; #var boffcol    {<bbb>}; 
#var pkeycol  {<bbe>}; #var pvalcol    {<eea>};
#var readycol {<eae>}; #var unreadycol {<bbb>};
#var flagcol  {<add>}; #var recol      {<099>};

#alias showpush { #nop <<;
  #var next {%1};
  #if {&tempc} {
    statlog {$templ$tempc$next$recol};
    #unvar tempc;
    #unvar templ;
  }; 
  #elseif {&templ} {
    #format tempc {%-20s} {$next};
  };
  #else {
    #format templ {%-20s} {$next};
  };
}#nop >>;
#alias showflush { #nop <<;
  #if &templ {
    #if &tempc {
      statlog {$templ$tempc$recol};
    } {
      statlog {$templ$recol};
    };
    #unvar tempc;
    #unvar templ;
  };
}#nop >>;
#alias showflags { #nop <<;
  #var flagline {};
  #foreach {$statusflags[]} {flag} {
    #format flagline {%s$flagcol%u$recol } {$flagline} {$flag};
  };
  statlog {$flagline}; #nop make sure this is not empty! (vs bug of capturing next from main pane);
  #unvar flagline;
}#nop >>;
#alias showprops { #nop <<;
  #var propline {};
  #foreach {$statusprops[]} {prop} {
    #var nextprop {$pkeycol$prop: $pvalcol$statusprops[$prop]};
    showpush {$nextprop};
  }; #unvar nextprop;
  showflush;
}#nop >>;
#alias showbuffs { #nop <<;
  #foreach {$dispbuffs[]} {buff} {
    #if {&activebuffs[$buff]} {
      #var nextbuff {$boncol$buff};
    }{
      #var nextbuff {$boffcol$buff};
    };
    showpush {$nextbuff};
  }; #unvar nextbuff;
  showflush;
}#nop >>;
#alias showready { #nop <<;
  #foreach {$dispready[]} {skill} {
    #if {&isready[$skill]} {
      #var nextskill {$readycol$skill};
    }{
      #var nextskill {$unreadycol$skill};
    };
    showpush {$nextskill};
  }; #unvar nextskill;
  showflush;
}#nop >>;
#alias showstatus { #nop overrideable to change order <<;
  #nop first clear the status pane;
  #var thecount 0; #while { $thecount < 7 } {#math thecount { $thecount + 1}; statlog { }};
  showflags; #nop display status flags line;
  showprops; #nop display properties;
  showbuffs; #nop display buffs;
  showready; #nop display ready skills;
  #gag {^  $};
  #showme {  }; #nop vs. last line bug... :-(;
  #ungag {^  $};
};#nop >>;
#nop >>;

#nop flag status handling;
#nop << flagon{flag}, flagoff{flag}, clearflags{} (means clear all);
#nop define the "methods";
#alias flagon {
  #if {"%1" == ""} {
    #echo {> flagon needs a flag name <};
  }{
    #var {statusflags[%1]} {on};
    showstatus;
  }
}
#alias flagoff {
  #if {"%1" == ""} {
    #echo {> flagoff needs a flag name <};
  }{
    #unvar statusflags[%1];
    showstatus;
  }
}
#alias clearflags {
  #var statusflags {};
    showstatus;
}
#nop >>
#nop << flagif{flag}{trigger}, unflagif{flag}{trigger};
#alias flagif {
  #high {^%2} {<bad>};
  #act {^%2} {
    flagon {%1};
  };
};
#alias unflagif {
  #high {^%2} {<bad>};
  #act {^%2} {
    flagoff {%1};
  };
};
#nop >>

#nop property status handling;
#alias sproperty { #nop << sproperty {key} {value};
  #if {"%1" == ""} {
    #echo {> sprop needs a property name <};
  }{
    #var {statusprops[%1]} {%2};
    showstatus;
  };
}; #nop >>
#alias spropclear { #nop << clears all if no argument;
  #if {"%1" == ""} {
    #var statusprops {};
    showstatus;
  }{
    #unvar {statusprops[%1]};
    showstatus;
  };
}; #nop >>

#nop buff status handling
#nop << buffon/buffoff {buffname} - make buff active/inactive;
#alias buffon {
  #if {"%1" == ""} {
    #echo {> buffon needs a flag name <};
  }{
    #nop add buff to display list, in case it wasn't there yet;
    #var dispbuffs[%1] {1};
    #nop add buff to active buffs list;
    #var activebuffs[%1] {on};
    #unvar queuedbuffs[%1];
    showstatus;
  }
}
#alias buffoff {
  #if {"%1" == ""} {
    #echo {> buffoff needs a flag name <};
  }{
    #nop add buff to display list, in case it wasn't there yet;
    #var dispbuffs[%1] {1};
    #nop remove buff from active buffs list;
    #unvar activebuffs[%1];
    #if {&autobuffs[%1]} {
      rebuff {%1};
    };
    showstatus;
  }
}
#nop >>;
#nop << buffif, buffoff and their 'ambiguous' counterparts for creating on/off buff detectors;
#alias buffif {
  #high {^%2} {<bda>};
  #nop create action to detect buff went on;
  #act {^%2} {
    buffon {%1};
  };
};
#alias unbuffif {
  #high {^%2} {<bda>};
  #nop create action to detect buff went off;
  #act {^%2} {
    buffoff {%1};
  };
};
#nop >>;
#nop << tossbuff{name} -- removes buff from all tables, removes all if no argument
#alias tossbuff {
  #if {"%1" == ""} {
    #var autobuffs   {};
    #var dispbuffs   {};
    #var activebuffs {};
    #var custombuffs {};
    #var queuedbuffs {};
  }{
    #unvar autobuffs[%1];
    #unvar dispbuffs[%1];
    #unvar activebuffs[%1];
    #unvar custombuffs[%1];
    #unvar queuedbuffs[%1];
  };
  showstatus;
}
#nop >>

#nop ready status handling
#nop << isready/isntready {skill|spell} - show whether skill/spell is ready to use or not;
#alias isready {
  #if {"%1" == ""} {
    #echo {> isready needs a skill/spell name <};
  }{
    #nop add skill/spell to display list, in case it wasn't there yet;
    #var dispready[%1] {1};
    #nop add skill/spell to ready list;
    #var isready[%1] {yes};
    showstatus;
  }
}
#alias isntready {
  #if {"%1" == ""} {
    #echo {> isntready needs a flag name <};
  }{
    #nop add skill/spell to display list, in case it wasn't there yet;
    #var dispready[%1] {1};
    #nop remove skill/spell from ready list;
    #unvar isready[%1];
    showstatus;
  }
}
#nop >>;
#nop << ready/unready detectors;
#alias isreadyif   {#high {^%2} {$readycol}; #act {^%2} {isready {%1}}};
#alias isntreadyif {#high {^%2} {<bda>}; #act {^%2} {isntready {%1}}};
#nop >>;
#nop << tossready{name} -- clears all if no argument
#alias tossready {
  #if {"%1" == ""} {
    #var dispready {};
    #var isready   {};
  }{
    #unvar dispready[%1];
    #unvar isready[%1];
  };
  showstatus;
}
#nop >>

#nop booleans provided for use in conditionals
#nop << @flagon{flag} @flagoff{flag} @buffon{buff} @buffoff{buff} @isready{skill} @isntready{skill}
#function flagon {
    #if { "$statusflags[%1]" == "on" } {
      #return 1; #nop true;
    } {
      #return 0; #nop false;
    };
}
#function flagoff {
    #if { "$statusflags[%1]" == "on" } {
      #return 0; #nop false;
    } {
      #return 1; #nop true;
    };
}
#function buffon {
    #if { "$activebuffs[%1]" == "on" } {
      #return 1; #nop true;
    } {
      #return 0; #nop false;
    };
}
#function buffoff {
    #if { "$activebuffs[%1]" == "on" } {
      #return 0; #nop false;
    } {
      #return 1; #nop true;
    };
}
#function isready {
    #if { "$isready[%1]" == "yes" } {
      #return 1; #nop true;
    } {
      #return 0; #nop false;
    };
}
#function isntready {
    #if { "$isready[%1]" == "yes" } {
      #return 0; #nop false;
    } {
      #return 1; #nop true;
    };
}
#nop >>

#nop loop on buffs / flags (buggy!! only works on very simple actions)
#nop << foreachbuff {action on %1}, foreachflag {action on %1}
#alias foreachbuff {
  #alias oneachbuff {%1};
  #foreach {$dispbuffs[]} {buff} {oneachbuff {$buff}};
  #unvar buff;
  #unvar oneachbuff;
}

#alias foreachflag {
  #alias oneachflag {%1};
  #foreach {$statusflags[]} {flag} {oneachflag {$flag}};
  #unvar flag;
  #unvar oneachflag;
}
#nop >>

#nop modification of autobuff/custombuff (actual use to be implemented in mud)
#nop << autobuff{name}{minmana}, custombuff{name}{action}
#alias autobuff {
  #var autobuffs[%1] {%2};
}
#alias custombuff {
  #var custombuffs[%1] {%2};
}
#nop >>
#nop << stopbuff{name} -- removes buff from auto-rebuff table 
#alias stopbuff {
  #unvar autobuffs[%1];
  showstatus;
}
#nop >>
#nop ------------------------
#nop CopyLeft by dalker
#nop create date: 2016-04-14
#nop modif  date: 2016-07-05
