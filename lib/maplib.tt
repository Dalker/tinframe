#nop -----------------------------------------
#nop  Standard map handling (mud independent)
#nop -----------------------------------------
#alias maphelp { #nop << help alias;
    #echo {--- TinFrame map handling --- };
    #echo {redrawmap               : redraw map           (usually automatic)};
    #echo {savemap                 : save map             (usually automatic)};
    #echo {closemap                : close map, saving it (usually automatic)};
    #echo {tossmap                 : close map without saving it};
    #echo {newmap <name>           : create new map};
    #echo {loadmap <name> [room]   : load existing map, with optional room (else room 1)};
    #echo {maptransition};
    #echo {     <dir> <map> [act]  : create transition to other map <map> in direction <dir>};
    #echo {                          [act] is an optional action to use instead of <dir> (e.g. {climb rope})};
    #echo {newtransition <d><m>[a] : as maptransition, but also create new map and relevant rooms};
    #echo {goto <room>             : set path to <room>};
    #echo {<Num*>                  : walk on path set by 'goto'};
    #echo {mapsymbol <symbol>      : set room symbol, or clear it if <symbol>=clear};
    #echo {mapname   <symbol>      : set room name, or clear it if <name>=clear};
    #echo {mapexit <dir> hide      : hide exit in direction <dir>};
    #echo {mapexit <dir> void      : make exit in direction <dir> void};
    #echo {mapexit <dir> <command> : send <command> when walking in direction <dir>};
    #echo {<Num/>                  : toggle between numpad real motion / fake motion on map only};
};
#nop >>;
#nop $currentmap will hold the current map name
#nop aliases 'newmap', 'loadmap', 'savemap', 'closemap' (also saves), 'tossmap' (doesn't save), redrawmap
#nop aliases 'maptransition' and 'newtransition' to switch between maps
#nop also 'moveonmap' and its counterpart 'moveforreal'

#nop << auxiliary functions: 'redrawmap', 'savemap', 'setmap name', 'unsetmap';

#alias redrawmap {#MAP {map} {59x22} {$maplogfile}};

#alias setmap {
  #var currentmap %1;
  #format mapfile {maps/%s.map} {$currentmap};
  #format mclfile {maps/%s.tt}  {$currentmap};
  #EVENT {MAP ENTER ROOM} {#if {&inthebackground} {#nop;} {redrawmap}};
}

#alias unsetmap {
  #unvar currentmap;
  #unvar mapfile;
  #unvar mclfile;
  #UNEVENT {MAP ENTER ROOM};
}

#alias savemap {
  #if &mapfile {
    #map write $mapfile;
    #echo {map saved.};
  };
  #else {
    #echo {savemap: impossible to save - current map not defined.};
  }
}
#nop >>
#nop << 'closemap', also called by newmap and loadmap;
#alias closemap {
  #class temp write $maplogfile;
  #if &mapfile {
    #echo {leaving $currentmap map safely.};
    savemap;
    #map destroy;
    unsetmap;
  };
  #else {
    #echo {closemap: impossible to close map - current map not defined.};
  }
}
#nop >>
#nop << destroy map without saving: 'tossmap';
#alias tossmap {
  #class temp write $maplogfile;
  #if &mapfile {
    #echo {tossing $currentmap map without saving.};
    #map destroy;
    unsetmap;
  };
  #else {
    #echo {tossmap: impossible to close map - current map not defined.};
  }
}
#nop >>
#nop << create a new map and make current room its first room: 'newmap name';
#alias newmap {
  #if     {"%1" == ""}            {#echo {newmap: can't create anonymous map.}};
  #elseif {"%1" == "$currentmap"} {#echo {newmap: can't create new map with name of current map.}};
  #else   {
    #format tmp {maps/%s.map} {%1};
    #script {temp} {ls $tmp};
    #if {"$temp[1]" != ""}{
      #echo {newmap: can't create map %1, file $tmp already exists!};
    };
    #unvar temp;
    #unvar tmp;
    #else {
      closemap;
      setmap %1;
      #map create 1000;
      #map goto   1;
    };
  };
}
#nop >>
#nop << load existing map with optional destination: 'loadmap name [room]';
#alias loadmap {
  #nop if no map asked, list available maps;
  #if     {"%1" == ""}            {
    #echo {loadmap: can't load anonymous map. Available maps are:};
    #script {maplist} {ls maps | grep ".map$"| sed "s/\.map$//" | xargs echo};
    #echo $maplist[1];
  };
  #else {
    #nop make sure map file exists;
    #format tmp {maps/%s.map} {%1};
    #script {temp} {ls $tmp};
    #if {"$temp[1]" == ""}{
      #echo {loadmap: can't find mapfile $tmp - aborting};
      #unvar temp;
      #unvar tmp;
    };

    #else { #nop map asked for exists, continue;
      
      #if {"%1" == "$currentmap"} { #nop check if already on asked for map;
        #echo {loadmap: staying in same map}
      };

      #else { #nop change to different map if asked for;
        #nop cleanly leave previous map, if any;
        closemap;

        #nop actual map loading;
        setmap %1;
        #map read $mapfile;
      };

      #nop (re)load map class if it exists;
      #script {temp} {ls $mclfile 2&> /dev/null};
      #if {"$temp[1]" != ""}{
        classincludefrom maps/$currentmap;
        #echo {loadmap: map class file found and loaded};
      };
      #unvar temp;

      #nop goto asked for map location (default = room 1);
      #if {"%2" != ""} {
        #echo {entering map at location %2};
        #map goto {%2};
      } {#map goto 1};
    };
  };
}
#nop >>
#nop << make moving to some direction actually switch to other map: 'maptransition dir mapname [room]';
#nop    notice: the direction has to point to an existing room that will never be actually reached, but
#nop            which typically has a mapsymbol pointing to the destination
#alias maptransition {
  #if { "%3" == "" } { 
    mapexit %1 {#delay .1 {loadmap %2}; #send {%1}; #echo {loading map... wait a tiny bit!}};
  } {
    mapexit %1 {#delay .1 {loadmap %2}; #send {%3}; #echo {loading map... wait a tiny bit!}};
  };
}
#nop >>
#nop << 'newtransition dir newmapname';
#nop    notice: the direction has to point to an existing room that will never be actually reached, but
#nop            which typically has a mapsymbol pointing to the destination
#alias newtransition {
  #var srcdir %1;
  #var srcmap $currentmap;
  #var dstmap %2;
  #format abdst {%.3s} $dstmap;
  #format abdst {%n} $abdst;
  #if { "%3" == "" } { 
    #var srccmd $srcdir;
  } {
    #var srccmd %3;
  };
  #switch {"$srcdir"} {
    #case {"n"} {#var dstdir s};
    #case {"s"} {#var dstdir n};
    #case {"e"} {#var dstdir w};
    #case {"w"} {#var dstdir e};
    #case {"u"} {#var dstdir d};
    #case {"d"} {#var dstdir u};
  };
  #if { "%4" == "" } { 
    #var dstcmd $dstdir;
  } {
    #var dstcmd %4;
  };

  #format tmp {maps/%s.map} {$dstmap};
  #script {temp} {ls $tmp};
  #if {"$temp[1]" != ""} {
    #echo {newtransition: map $dstmap exists - aborting};
  } {
    mapname {from$dstmap};
    #map move $srcdir;
    mapsymbol $abdst;
    mapname $dstmap;
    newmap $dstmap;
    #map move $dstdir;
    mapsymbol {...};
    mapname $srcmap;
    #map move $srcdir;
    mapexit $dstdir {#delay .1 {loadmap $srcmap from$dstmap}; #send {$dstcmd}; #echo {loading map... wait a tiny bit!}};
    loadmap $srcmap from$dstmap;
    mapexit $srcdir {#delay .1 {loadmap $dstmap}; #send {$srccmd}; #echo {loading map... wait a tiny bit!}};
  };
}
#nop >>

#nop -----------------------------------------
#nop   Other actions on map
#nop -----------------------------------------
#nop alias 'goto <dest>' and macro <Num*> : set destination and walk there
#nop aliases 'mapsymbol' [clear|symbol], 'mapexit' [hide|void|command], 'mapname' [clear|symbol]
#nop << 'goto room' and then travel path to selected location with <Num*> and with <F10>;
#alias goto {
  #map find {%0};
}
#macro {\eOj}   {#path walk}
#macro {\e[21~} {#path walk}
#macro {\eOP}   {#path walk}

#nop >>
#nop << Set current room's symbol, name and exit properties: 'mapsymbol S', 'mapname name', mapexit foo [hide|void|command]'
#alias mapsymbol {
  #if { "%1" == "" } {
    #map get roomsymbol tmp;
    #if { "$tmp" == "" } {
      #echo {this room has no symbol};
    };
    #else { 
      #echo {room symbol is $tmp};
    };
  };
  #elseif { "%1" == "clear" } {
    #map set roomsymbol {};
    #echo {room symbol cleared};
  };
  #else { 
    #map set roomsymbol %0;
    #echo {room symbol set to %0};
  }
}
#alias mapname   {
  #if { "%1" == "" } {
    #map get roomname tmp;
    #if { "$tmp" == "" } {
      #echo {this room has no name};
    };
    #else { 
      #echo {room name is $tmp};
    };
  };
  #elseif { "%1" == "clear" } {
    #map name {};
    #echo {room name cleared};
  };
  #else { 
    #map name %0;
    #echo {room name set to %0};
  }
}
#alias mapexit {
  #if { "%2" == "hide"}{
    #map exitflag %1 hide;
    #echo {set exit at %1 to auto-hide};
  };
  #elseif { "%2" == "void"}{
    #map exit %1 void;
    #echo {set room to the %1 to void};
  };
  #else {
    #map exit %1 command {%2};
    #echo {set exit at %1 to really mean %2};
  };
}
#nop >>

#nop -----------------------------------------
#nop   General map setup 
#nop -----------------------------------------
#nop << various configs and pathdirs;
#CONFIG   {SPEEDWALK}  {OFF}
#PATHDIR  {n}  {s}   {1}
#PATHDIR  {e}  {w}   {2}
#PATHDIR  {s}  {n}   {4}
#PATHDIR  {w}  {e}   {8}
#PATHDIR  {u}  {d}   {16}
#PATHDIR  {d}  {u}   {32}
#PATHDIR  {ne} {sw}  {3}
#PATHDIR  {nw} {se}  {9}
#PATHDIR  {se} {nw}  {6}
#PATHDIR  {sw} {ne}  {12}
#PATHDIR  {north} {south} {1}
#PATHDIR  {east}  {west}  {2}
#PATHDIR  {south} {north} {4}
#PATHDIR  {west}  {east}  {8}
#PATHDIR  {up}    {down}  {16}
#PATHDIR  {down}    {up}  {32}
#PATHDIR  {northeast} {southwest} {3}
#PATHDIR  {northwest} {southeast} {9}
#PATHDIR  {southeast} {northwest} {6}
#PATHDIR  {southwest} {northeast} {12}
#nop the following is for vtmap style, normally not used
#map legenda ▪ █ █ ╚ █ ║ ╔ ╠ █ ╝ ═ ╩ ╗ ╣ ╦ ╬ ▩ 
#nop >>

#nop -----------------------------------------
#nop   Keypad motion
#nop -----------------------------------------
#nop << moveforreal (default) and moveonmap
#alias moveforreal {
  #macro {\eOt} {w};
  #macro {\eOv} {e};
  #macro {\eOx} {n};
  #macro {\eOr} {s};
  #macro {\eOw} {nw};
  #macro {\eOy} {ne};
  #macro {\eOs} {se};
  #macro {\eOq} {sw};
  #macro {\eOm} {d};
  #macro {\eOk} {u};
  #echo {keypad will now provide real movement};
  #var moving {real};
}
#alias moveonmap {
  #macro {\eOt} {#map move w};
  #macro {\eOv} {#map move e};
  #macro {\eOx} {#map move n};
  #macro {\eOr} {#map move s};
  #macro {\eOw} {#map move nw};
  #macro {\eOy} {#map move ne};
  #macro {\eOs} {#map move se};
  #macro {\eOq} {#map move sw};
  #macro {\eOm} {#map move d};
  #macro {\eOk} {#map move u};
  #echo {keypad will now provide movement on map only};
  #var moving {map};
}
#alias movetoggle {
  #if { "$moving" == "real" } { moveonmap } { moveforreal };
}
#macro {\eOo} {movetoggle};
moveforreal
#nop >>
#nop << extras for multis;
#if {$multi} {
  #alias moveone {
    #macro {\eOt} {#one w};
    #macro {\eOv} {#one e};
    #macro {\eOx} {#one n};
    #macro {\eOr} {#one s};
    #macro {\eOw} {#one nw};
    #macro {\eOy} {#one ne};
    #macro {\eOs} {#one se};
    #macro {\eOq} {#one sw};
    #macro {\eOm} {#one d};
    #macro {\eOk} {#one u};
    #echo {keypad will now provide movement for #one};
    #var moving {one};
  };
  #alias movetwo {
    #macro {\eOt} {#two w};
    #macro {\eOv} {#two e};
    #macro {\eOx} {#two n};
    #macro {\eOr} {#two s};
    #macro {\eOw} {#two nw};
    #macro {\eOy} {#two ne};
    #macro {\eOs} {#two se};
    #macro {\eOq} {#two sw};
    #macro {\eOm} {#two d};
    #macro {\eOk} {#two u};
    #echo {keypad will now provide movement for #two};
    #var moving {two};
  };
  #alias moveother {
    #if     { "$moving" == "one" } { movetwo };
    #elseif { "$moving" == "two" } { moveone };
    #elseif { "$activesession" == "two" } { moveone };
    #elseif { "$activesession" == "one" } { movetwo };
    #else   { #echo {moveother : no \$activesession - ack!...}};
  };
  #macro {\eOn} {moveother};
}

#nop #echo {class maplib (re)loaded};
#nop ------------------------
#nop CopyLeft by dalker
#nop create date: 2014-02-12
#nop modif  date: 2016-07-03
